#######################################
#            ViPER                    #
#  The Video Processing               #
#         Evaluation Resource         #
#                                     #
#  Distributed under the GPL license  #
#        Terms available at gnu.org.  #
#                                     #
#  Copyright University of Maryland,  #
#                      College Park.  #
#######################################

# W3 RDF Namespaces
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd:  <http://www.w3.org/2001/XMLSchema#> .

@prefix html: <http://www.w3.org/1999/xhtml#> .

@prefix foaf: <http://xmlns.com/foaf/0.1/> .

# LAMP AppLoader namespaces
@prefix lal:   <http://viper-toolkit.sourceforge.net/owl/apploader#> .
@prefix menu:  <http://viper-toolkit.sourceforge.net/owl/apploader/menu#> .
@prefix mru:   <http://viper-toolkit.sourceforge.net/owl/apploader/mru#> .
@prefix undo:  <http://viper-toolkit.sourceforge.net/owl/apploader/undo#> .
@prefix props: <http://viper-toolkit.sourceforge.net/owl/apploader/props#> .

# ViPER Metadata Namespaces
@prefix data: <http://lamp.cfar.umd.edu/viperdata#> .

# ViPER-GT Program namespaces
@prefix gt:     <http://viper-toolkit.sourceforge.net/owl/gt#> .
@prefix canvas: <http://viper-toolkit.sourceforge.net/owl/gt/canvas#> .
@prefix chrono: <http://viper-toolkit.sourceforge.net/owl/gt/chronicle#> .
@prefix table:  <http://viper-toolkit.sourceforge.net/owl/gt/table#> .

@prefix viper-impl: <http://viper-toolkit.sourceforge.net/owl/api/impl#> .

# This document's Namespace
@prefix : <#> .

#<>	owl:imports <http://viper-toolkit.sourceforge.net/owl/apploader/defaults> .
# haven't worked out the bugs in the spec for this yet.
# need 

# Command line arguments and properties

## would like to be able to specify rules like:
#[	a lal:CommandLineTrigger ;
#	rdfs:label "file" ;
#	lal:abbr "f" ;
#	lal:var :file ;
#	lal:implies {
#		:mediator  lal:setProperty [
#			lal:propertyName "FileName" ;
#			lal:propertyValue :file ] } ] .
#
## This would convert "-f file.xml" into ":mediator lal:setProperty..."
## perhaps if we switch to jena2 or another rdf parser...
## I should be able to hack it together - a formula is a Model that
## implements RDFNode. Unfortunately, they can't be serialized to RDF/XML and
## are not part of the RDF M&S, which is wierd, since timbl uses them all
## the time. One would assume that he would have the final say on these
## sorts of things...

## For now, at least until I implement cwm in java, I will do something like this:
[	a lal:PreferenceTrigger ;
	rdfs:label "file"@en ; # used for --file <file>
	lal:longName "firstFile"@en ; # used for -DfirstFile=<file>; if not specified, use label
	lal:abbr "f"@en ; #used for -f <file>; if not specified, none
	rdfs:description "the metadata file to load first"@en ; # printed by '-h'
		# ones without a description are not printed by -h
		# may add a -H option that uses dc:description to print out 
		# more detailed messages.
	lal:invokes "edu.umd.cfar.lamp.viper.gui.core.SetFilePref" ] .
		# invokes the trigger method given the prefs
		# and the value. Class must implement the 
		# TriggerHandler interface.
## which is considerably less cool, in that you have to write java
## code to allow a different pref to be set from the command line,
## although you still get l10n, at least whenever jena supports the
## '"string"@en' literal format.

[	a lal:PreferenceFlag ;
	# This prints out the usage using the preferences format
	# Unfortunately, this means the full usage won't get printed
	# if the config file is not proper notation3.
	rdfs:label "help"@en ; 
	lal:abbr "h"@en ;
	rdfs:description "Print out this help message"@en ; 
	lal:invokes "edu.umd.cfar.lamp.apploader.prefs.PrintUsage" ] .

[	a lal:PreferenceFlag ;
	rdfs:label "version"@en ; 
	lal:abbr "v"@en ;
	rdfs:description "Print out the version of ViPER"@en ; 
	lal:invokes "edu.umd.cfar.lamp.viper.gui.core.PrintVersion" ] .

[	a lal:PreferenceTrigger ;
	lal:longName "user.name" ;
	lal:inserts [ # adds the triple, with the value as the untyped/nolang object
		a rdf:Statement ;
		rdf:subject :currentUser ; # if subject is missing, creates a new bnode
		rdf:predicate foaf:name ] ;
	lal:invokes "edu.umd.cfar.lamp.apploader.prefs.PropsToPrefs" ] .
[	a lal:PreferenceTrigger ;
	lal:longName "user.home" ;
	lal:inserts [ # adds the triple, with the value as the untyped/nolang object
		a rdf:Statement ;
		rdf:subject :currentUser ; # if subject is missing, creates a new bnode
		rdf:predicate lal:userDirectory ] ;
	lal:invokes "edu.umd.cfar.lamp.apploader.prefs.PropsToPrefs" ] .


###########
#  Beans  #
###########

# need to add support for loading jar files
# for now, just assume everything is in the classpath

# Basic application settings
# lal:Core is the only "bean" that is defined by default
lal:Core
	a lal:ApplicationBean ;
	lal:abbr "configurator" ;
	rdfs:label "ViPER: Ontology Editor"@en ;
	lal:shellCommand "Usage: configurator <options>" ;
	lal:icon <file:common/icons/logo-32.png> ;
	lal:setProperty [
		a lal:BeanProperty ;
		lal:propertyName "vetoCloseAction" ;
		lal:propertyValue [
			a lal:BeanProperty ;
			lal:propertyName "saveDiscardOrCancelDialogVeto" ;
			lal:propertyOf :mediator ] ] ;
	lal:setProperty [
		a lal:BeanProperty ;
		lal:propertyName "Size" ;
		lal:propertyValue :preferredSize ] ;
	lal:windowInputAction [
		lal:hotkey "control Z" ;
		lal:hasAction :undoActionate ] ;
	lal:windowInputAction [
		lal:hotkey "control Y" ;
		lal:hasAction :redoActionate ] ;
	lal:windowInputAction [
		lal:hotkey "control N" ;
		lal:hasAction :newMetadataActionate ] ;
	lal:windowInputAction [
		lal:hotkey "control O" ;
		lal:hasAction :openMetadataActionate ] ;
	lal:windowInputAction [
		lal:hotkey "control S" ;
		lal:hasAction :saveMetadataActionate ] ;
	rdfs:description "Tool for editing video metadata ontologies."@en .

:preferredSize
	a lal:ApplicationBean ;
	lal:className "java.awt.Dimension" ;
	lal:setProperty [
		lal:propertyName "size" ;
		lal:propertyValue ( "600"^^xsd:int "400"^^xsd:int ) ] .

# First, load the mediator
:mediator
	a lal:ApplicationBean ;
	rdfs:comment "The mediator holds a viper data file; it acts as a javabean wrapper for the api." ;
	lal:className "edu.umd.cfar.lamp.viper.gui.core.ViperViewMediator" ;
	lal:requires lal:Core , :datatypes ;
	lal:setProperty [
		a lal:BeanProperty ;
		lal:propertyName "prefs" ;
		lal:propertyValue [
			a lal:BeanProperty ;
			lal:propertyName "prefs" ;
			lal:propertyOf lal:Core ] ] ;
	lal:setProperty [
		a lal:BeanProperty ;
		lal:propertyName "actionHistory" ;
		lal:propertyValue :actionManager ] ;
	lal:setProperty [
		a lal:BeanProperty ;
		lal:propertyName "dataFactory" ;
		lal:propertyValue :datatypes ] ;
	lal:setProperty [
		a lal:BeanProperty ;
		lal:propertyName "historyManager" ;
		lal:propertyValue :historyManager ].



:datatypes
	a lal:ApplicationBean ;
	rdfs:comment "This loads the datatypes. It comes with all the default viper-data types loaded already." ;
	lal:className "viper.api.datatypes.ViperDataFactoryImpl" .

[	a gt:ChoosableFile ;
	gt:extension "xml", "xgtf", "xrdf" ;
	gt:mimeType "application/xml", "application/viper+xml" ;
	rdfs:label "XML Files" ] .


:treeAndPropPane
	a lal:ApplicationBean ;
	rdfs:label "Tree and Property Sheet Views" ;
	rdfs:comment "Split view with the configTree on the right and the foreverSheet on the left" ;
	lal:className "javax.swing.JSplitPane" ;
	lal:requires :configTree, :foreverSheet ;
	lal:setProperty [
		lal:propertyName "orientation" ;
		lal:propertyValue "1"^^xsd:int ] ; # left/right
	lal:setProperty [
		lal:propertyName "topComponent" ;
		lal:propertyValue :configTree ] ;
	lal:setProperty [
		lal:propertyName "bottomComponent" ;
		lal:propertyValue :foreverSheet ] ;
	lal:addTo lal:Core .

:configTree
	a lal:ApplicationBean ;
	rdfs:label "Configuration Tree" ;
	rdfs:comment "This is a tree view of the configuration (schema/ontology) of the currently loaded GTF" ;
	lal:className "edu.umd.cfar.lamp.viper.gui.config.ConfigEditor" ;
	lal:requires :mediator , :foreverSheet ;
	lal:setProperty [
		a lal:BeanProperty ;
		lal:propertyName "sheet" ;
		lal:propertyValue :foreverSheet ] ;
	lal:setProperty [
		lal:propertyName "Mediator" ;
		lal:propertyValue :mediator ] .

:foreverSheet 
	a lal:ApplicationBean ;
	rdfs:label "Property Sheet" ;
	rdfs:comment "the foreversheet displays a property sheet for the currently selected viper node" ;
	lal:setProperty [
		a lal:BeanProperty ;
		lal:propertyName "prefs" ;
		lal:propertyValue [
			a lal:BeanProperty ;
			lal:propertyName "prefs" ;
			lal:propertyOf lal:Core ] ] ;
	lal:className "edu.umd.cfar.lamp.apploader.propertysheets.PropertySheet" .

:historyManager
	a lal:ApplicationBean ;
	rdfs:comment "MRU History Manager manages the user's most recently used file list" ;
	lal:className "edu.umd.cfar.lamp.apploader.prefs.FileHistoryManager" ;
	lal:requires :mediator ;
	lal:setProperty [
		a lal:BeanProperty ;
		lal:propertyName "prefs" ;
		lal:propertyValue [
			a lal:BeanProperty ;
			lal:propertyName "prefs" ;
			lal:propertyOf lal:Core ] ] ;
	lal:setProperty [
		lal:propertyName "MRULength" ;
		lal:propertyValue "4"^^xsd:int ] ;
	lal:setProperty [
		lal:propertyName "actionListenerResource" ;
		lal:propertyValue [
			lal:listenerBean :mediator ;
			lal:listenerType "RecentlyViewedFileActionListener" ] ] ;
	lal:setProperty [
		lal:propertyName "parentResource" ;
		lal:propertyValue :filemenu ] .


:actionManager
	a lal:ApplicationBean ;
	rdfs:label "Undo History" ;
	rdfs:comment "Action History Manager manages the user's undo history" ;
	lal:className "edu.umd.cfar.lamp.apploader.undo.ActionHistoryPane" .

######################
#      Actions       #
######################
:undoActionate
	a lal:Action ;
	lal:sendsTo [
		lal:listenerBean :mediator ;
		lal:listenerType "UndoActionListener" ] .

:deleteSelectedNodeActionate
	a lal:Action ;
	lal:sendsTo [
		lal:listenerBean :configTree ;
		lal:listenerType "DeleteActionListener" ] .

:createConfigActionate
	a lal:Action ;
	lal:sendsTo [
		lal:listenerBean :configTree ;
		lal:listenerType "NewConfigActionListener" ] .

:createAttributeActionate
	a lal:Action ;
	lal:sendsTo [
		lal:listenerBean :configTree ;
		lal:listenerType "NewAttrConfigActionListener" ] .

:redoActionate 
	a lal:Action ;
	lal:sendsTo [
		lal:listenerBean :mediator ;
		lal:listenerType "RedoActionListener" ] .

:newMetadataActionate
	a lal:Action ;
	lal:sendsTo [
		lal:listenerBean :mediator ;
		lal:listenerType "NewFileActionListener" ] .

:openMetadataActionate
	a lal:Action ;
	lal:sendsTo [
		lal:listenerBean :mediator ;
		lal:listenerType "OpenFileActionListener" ] .

:saveMetadataActionate
		a lal:Action ;
		lal:sendsTo [
			lal:listenerBean :mediator ;
			lal:listenerType "SaveActionListener" ] .

:saveAsMetadataActionate 
	a lal:Action ;
	lal:sendsTo [
		lal:listenerBean :mediator ;
		lal:listenerType "SaveAsActionListener" ] .

:showUndoHistoryActionate
	a lal:Action ;
	lal:actionCommand :actionManager ;
	lal:sendsTo [
		lal:listenerBean lal:Core ;
		lal:listenerType "ShowWindowActionListener" ] .

:exitProgramActionate
	a lal:Action ;
	lal:sendsTo [
		lal:listenerBean lal:Core ;
		lal:listenerType "ExitListener" ] .

######################
# Menu Configuration #
######################
:filemenu
	a menu:Menu ;
	rdfs:label "File" ;
	menu:mnemonic "F" ;
	menu:attachment lal:Core ;
	rdfs:comment "File menu, for manipulating files" ;
	menu:priority "0" .

:editmenu
	a menu:Menu ;
	rdfs:label "Edit" ;
	menu:mnemonic "E" ;
	menu:attachment lal:Core ;
	rdfs:comment "Edit menu, for copying, pasting, and managing the history" ;
	menu:priority "1" .
:newConfig
	a menu:Item ;
	# I'd like the menu items to be able to inherit
	# label, comment, mnemonic, icon, etc from the action
	# resource. But for now,
	# the ones on the action are ignored.
	menu:attachment :editmenu ;
	rdfs:label "Create New Descriptor Type" ;
	rdfs:comment "Create a new descriptor type" ;
	menu:generates :createConfigActionate ;
	menu:mnemonic "N" ;
	menu:priority "10" .
:newAttrConfig
	a menu:Item ;
	menu:attachment :editmenu ;
	rdfs:label "Create New Attribute Field" ;
	rdfs:comment "Create a new attribute for the selected descriptor type" ;
	menu:generates :createAttributeActionate ;
	menu:mnemonic "F" ;
	menu:priority "11" .
:deleteNode
	a menu:Item ;
	menu:attachment :editmenu ;
	rdfs:label "Delete Selected" ;
	rdfs:comment "Delete the selected field or descriptor type" ;
	menu:generates :deleteSelectedNodeActionate ;
	menu:mnemonic "D" ;
	menu:priority "-200" .

:undo
	a menu:Item ;
	menu:attachment :editmenu ;
	rdfs:label "Undo" ;
	rdfs:comment "Undo the last edit" ;
	menu:generates :undoActionate ;
	menu:mnemonic "U" ;
	menu:priority "1" .
:redo
	a menu:Item ;
	menu:attachment :editmenu ;
	rdfs:label "Redo" ;
	rdfs:comment "Redo an undone action" ;
	menu:generates :redoActionate ;
	menu:mnemonic "R" ;
	menu:priority "2" .

:viewmenu
	a menu:Menu ;
	rdfs:label "View" ;
	menu:mnemonic "V" ;
#	menu:attachment lal:Core ;
	rdfs:comment "View menu, for controlling the user's perspective" ;
	menu:priority "3" .


:helpmenu
	a menu:Menu ;
	rdfs:label "Help" ;
	menu:mnemonic "H" ;
#	menu:attachment lal:Core ;
	rdfs:comment "Help menu, for dispensing useful advice." ;
	menu:priority "-1" .

:newMetadata
	a menu:Item ;
	menu:attachment :filemenu ;
	rdfs:label "New Metadata..." ;
	rdfs:comment "Create a new metadata file from a template." ;
	menu:generates :newMetadataActionate ;
	menu:mnemonic "N" ;
	menu:priority "0" .

:openMetadata
	a menu:Item ;
	menu:attachment :filemenu ;
	rdfs:label "Open Existing Metadata..." ;
	rdfs:comment "Open a metadata file that has already been created." ;
	menu:generates :openMetadataActionate ;
	menu:mnemonic "O" ;
	menu:priority "4" .

:saveMetadata
	a menu:Item ;
	menu:attachment :filemenu ;
	rdfs:label "Save Metadata" ;
	rdfs:comment "Save over the old file." ;
	menu:generates :saveMetadataActionate ;
	menu:mnemonic "S" ;
	menu:priority "5" .
:saveAsMetadata
	a menu:Item ;
	menu:attachment :filemenu ;
	rdfs:label "Save As..." ;
	rdfs:comment "Save as a different file." ;
	menu:generates :saveAsMetadataActionate ;
	menu:mnemonic "A" ;
	menu:priority "6" .

:windowmenu
	a menu:Menu ;
	rdfs:label "Window" ;
	menu:mnemonic "W" ;
	menu:attachment lal:Core ;
	rdfs:comment "Display, or bring to foreground, different windows." ;
	menu:priority "-2" .
:undoWindow
	a menu:Item ;
	menu:attachment :windowmenu ;
	rdfs:label "Show Undo History" ;
	rdfs:comment "Displays the undo history in a seperate window." ;
	menu:generates :showUndoHistoryActionate ;
	menu:mnemonic "U" ;
	menu:priority "1" .

:exitGt
	a menu:Item ;
	menu:attachment :filemenu ;
	rdfs:label "Exit" ;
	rdfs:comment "Close ViPER-GT Ontology Editor." ;
	menu:generates :exitProgramActionate ;
	menu:mnemonic "X" ;
	menu:priority "-1" .


#############
#   ViPER   #
# Datatypes #
#############
:setNodeToParent
	lal:propertyValue lal:Parent ;
	lal:propertyName "Node" .

data:bvalue
	props:editor [ 
		a lal:TemporaryBean , props:Editor ; 
		lal:className "edu.umd.cfar.lamp.viper.gui.data.bvalue.BvalueEditor" ;
		lal:setProperty :setNodeToParent ] .
data:dvalue
	props:editor [ 
		a lal:TemporaryBean , props:Editor ; 
		lal:className "edu.umd.cfar.lamp.viper.gui.data.dvalue.DvalueEditor" ;
		lal:setProperty :setNodeToParent ] .
data:fvalue
	props:editor [ 
		a lal:TemporaryBean , props:Editor ; 
		lal:className "edu.umd.cfar.lamp.viper.gui.data.fvalue.FvalueEditor" ;
		lal:setProperty :setNodeToParent ] .
data:svalue
	props:editor [ 
		a lal:TemporaryBean , props:Editor ; 
		lal:className "edu.umd.cfar.lamp.viper.gui.data.svalue.SvalueEditor" ;
		lal:setProperty :setNodeToParent ] .

data:bbox
	props:editor [ 
		a lal:TemporaryBean , props:Editor ; 
		lal:className "edu.umd.cfar.lamp.viper.gui.data.bbox.BboxEditor" ;
		lal:setProperty :setNodeToParent ] ;
	canvas:viewCreator "edu.umd.cfar.lamp.viper.gui.canvas.datatypes.BboxNodeWrapper" ;
	chrono:segmentFactory "edu.umd.cfar.lamp.viper.gui.canvas.chronology." .
data:circle
	props:editor [ 
		a lal:TemporaryBean , props:Editor ; 
		lal:className "edu.umd.cfar.lamp.viper.gui.data.circle.CircleEditor" ;
		lal:setProperty :setNodeToParent ] .
data:ellipse
	props:editor [ 
		a lal:TemporaryBean , props:Editor ; 
		lal:className "edu.umd.cfar.lamp.viper.gui.data.ellipse.EllipseEditor" ;
		lal:setProperty :setNodeToParent ] .
data:obox
	props:editor [ 
		a lal:TemporaryBean , props:Editor ; 
		lal:className "edu.umd.cfar.lamp.viper.gui.data.obox.OboxEditor" ;
		lal:setProperty :setNodeToParent ] .
data:point
	props:editor [ 
		a lal:TemporaryBean , props:Editor ; 
		lal:className "edu.umd.cfar.lamp.viper.gui.data.point.PointEditor" ;
		lal:setProperty :setNodeToParent ] .
data:polygon
	props:editor [ 
		a lal:TemporaryBean , props:Editor ; 
		lal:className "edu.umd.cfar.lamp.viper.gui.data.polygon.PolygonEditor" ;
		lal:setProperty :setNodeToParent ] .

data:lvalue
	props:editor [ 
		a lal:TemporaryBean , props:Editor ; 
		lal:className "edu.umd.cfar.lamp.viper.gui.data.lvalue.LvalueEditor" ;
		lal:setProperty :setNodeToParent ] ;
	props:hasProperty [
		rdfs:label "List" ;
		lal:propertyName "possibles" ;
		props:interfacer :setLvaluePossibles ;
		props:renderer :lvaluePossiblesRenderer ;
		props:editor :lvaluePossiblesEditor ] .
:setLvaluePossibles
	a lal:ApplicationBean ;
	rdfs:label "Set lvalue possibility list functor" ;
	lal:className "edu.umd.cfar.lamp.viper.gui.data.lvalue.SetLvaluePossibles" .
:lvaluePossiblesEditor
	a props:Editor , lal:TemporaryBean ;
	lal:className "edu.umd.cfar.lamp.viper.gui.data.lvalue.LvaluePossiblesEditor" ;
	lal:setProperty :setNodeToParent .
:lvaluePossiblesRenderer
	a props:Renderer , lal:TemporaryBean ;
	lal:className "edu.umd.cfar.lamp.viper.gui.data.lvalue.LvaluePossiblesRenderer" ;
	lal:setProperty [ 
		lal:propertyValue lal:Parent ;
		lal:propertyName "AttrConfig" ] .


########################################
# Property Sheet Renderers and Editors #
# Am I the only person who thinks n3   #
# needs an xinclude?                   #
########################################

:nodeChangeListener
	props:listenerType "viper.api.extensions.NodeListener" ;
	props:listenerName "NodeListener" .

[	props:describes "viper.api.AttrConfig" ;
	props:propertyOrder (
		[	lal:propertyName "AttrName" ;
			props:interfacer :setAttrName ;
			props:renderer :attrConfigNameEditor ;
			props:editor :attrConfigNameEditor ;
			rdfs:label "Name" ]

		[	lal:propertyName "AttrType" ;
			props:interfacer :setAttrType ;
			props:renderer :attrTypeRenderer ;
			props:editor :attrTypeEditor ;
			rdfs:label "Data Type" ]
		
		[	lal:propertyName "dynamic" ;
			props:interfacer :setAttrIsDynamic ;
			props:renderer :attrIsDynamicRenderer ;
			props:editor :attrIsDynamicEditor ;
			rdfs:label "dynamic" ]
		
		[	lal:propertyName "DefaultVal" ;
			props:interfacer [
				a lal:TemporaryBean ;
				rdf:label "Object to Set whether an Attribute value or AttrConfig default value" ;
				lal:className "edu.umd.cfar.lamp.viper.gui.config.SetAttrValue" ] ;
			props:renderer :attrValueRenderer ;
			props:editor [
				a lal:BeanProperty ;
				lal:propertyName "AttrValueEditor" ;
				lal:propertyOf [ 
					a lal:TemporaryBean ;
					lal:className "edu.umd.cfar.lamp.viper.gui.data.AttrValueEditorFactory" ;
					lal:setProperty [
						lal:propertyName "Prefs" ;
						lal:propertyValue [
							lal:propertyOf lal:Core ;
							lal:propertyName "prefs" ] ] ;
					lal:setProperty [
						lal:propertyName "AttributeConfig" ;
						lal:propertyValue lal:Parent ] ] ] ;
			rdfs:label "Default" ]
		) ;
	props:addListener :nodeChangeListener ;
	props:extendedProperties [
		a lal:TemporaryBean ;
		lal:className "edu.umd.cfar.lamp.viper.gui.config.AttrConfigExtensions" ;
		lal:setProperty [
			lal:propertyName "prefs" ;
			lal:propertyValue [
				a lal:BeanProperty ;
				lal:propertyName "prefs" ;
				lal:propertyOf lal:Core ] ] ;
		lal:setProperty [
			lal:propertyName "AttrConfig" ;
			lal:propertyValue lal:Parent ] ] ] .


:setDescName
	a lal:ApplicationBean ;
	rdfs:label "Set Descriptor Name Functor" ;
	lal:className "edu.umd.cfar.lamp.viper.gui.config.SetDescName" .
:setDescType
	a lal:ApplicationBean ;
	rdfs:label "Function Object for Setting Descriptor Type (e.g. FILE or OBJECT)" ;
	lal:className "edu.umd.cfar.lamp.viper.gui.config.SetDescType" .


:setAttrName
	a lal:ApplicationBean ;
	rdfs:label "Function Object to Set an Attribute Name" ;
	lal:className "edu.umd.cfar.lamp.viper.gui.config.SetAttrName" .
:setAttrType
	a lal:ApplicationBean ;
	rdfs:label "Function Object to Set an Attribute Data Type (e.g. bbox)" ;
	lal:className "edu.umd.cfar.lamp.viper.gui.config.SetAttrType" .
:setAttrIsDynamic
	a lal:ApplicationBean ;
	rdfs:label "Function Object to Set whether an Attribute is dynamic" ;
	lal:className "edu.umd.cfar.lamp.viper.gui.config.SetAttrIsDynamic" .

[	props:describes "viper.api.Config" ;
	props:addListener :nodeChangeListener ;
	props:propertyOrder (
		[	lal:propertyName "DescType" ;
			lal:propertyValue lal:Parent ;
			props:renderer :descTypeRenderer ;
			props:editor :descTypeEditor ;
			props:interfacer :setDescType ;
			rdfs:label "Data Type" ]
		
		[	lal:propertyName "DescName" ;
			lal:propertyValue lal:Parent ;
			rdfs:label "Name" ;
			props:renderer :configNameRenderer ;
			props:editor :configNameEditor ;
			props:interfacer :setDescName ] ) ] .

:descTypeEditor
	a props:Editor ;
	a lal:TemporaryBean ;
	lal:className "edu.umd.cfar.lamp.viper.gui.config.DescTypeEditor" ;
	lal:setProperty [ 
		lal:propertyValue lal:Parent ;
		lal:propertyName "descType" ] .
:descTypeRenderer
	a props:Renderer ;
	a lal:TemporaryBean ;
	lal:className "edu.umd.cfar.lamp.viper.gui.config.DescTypeRenderer" ;
	lal:setProperty [ 
		lal:propertyValue lal:Parent ;
		lal:propertyName "descType" ] .

:stringRenderer 
	a props:Renderer ;
	a lal:TemporaryBean ;
	lal:className "edu.umd.cfar.lamp.apploader.propertysheets.StringEditor" ;
	lal:setProperty [ 
		lal:propertyValue lal:Parent ;
		lal:propertyName "Text" ] .
:stringEditor
	a props:Editor ;
	a lal:TemporaryBean ;
	lal:className "edu.umd.cfar.lamp.apploader.propertysheets.StringEditor" ;
	lal:setProperty [ 
		lal:propertyValue lal:Parent ;
		lal:propertyName "Text" ] .


:configNameRenderer
	a props:Renderer ;
	a lal:TemporaryBean ;
	lal:className "edu.umd.cfar.lamp.viper.gui.config.DescNameEditor" ;
	lal:setProperty [ 
		lal:propertyValue lal:Parent ;
		lal:propertyName "Text" ] .
:configNameEditor
	a props:Editor ;
	a lal:TemporaryBean ;
	lal:className "edu.umd.cfar.lamp.viper.gui.config.DescNameEditor" ;
	lal:setProperty [ 
		lal:propertyValue lal:Parent ;
		lal:propertyName "Text" ] .


:attrConfigNameEditor
	a props:Editor ;
	a lal:TemporaryBean ;
	lal:className "edu.umd.cfar.lamp.viper.gui.config.AttrNameEditor" ;
	lal:setProperty [ 
		lal:propertyValue lal:Parent ;
		lal:propertyName "Text" ] .

:attrTypeEditor
	a props:Editor ;
	a lal:TemporaryBean ;
	lal:className "edu.umd.cfar.lamp.viper.gui.config.AttrTypeEditor" ;
	lal:setProperty [
		lal:propertyName "dataFactory" ;
		lal:propertyValue :datatypes ] ;
	lal:setProperty [ 
		lal:propertyValue lal:Parent ;
		lal:propertyName "attrType" ] .
:attrTypeRenderer
	a props:Renderer ;
	a lal:TemporaryBean ;
	lal:className "edu.umd.cfar.lamp.viper.gui.config.AttrTypeRenderer" ;
	lal:setProperty [ 
		lal:propertyValue lal:Parent ;
		lal:propertyName "attrType" ] .

:attrIsDynamicEditor
	a props:Editor ;
	a lal:TemporaryBean ;
	lal:className "edu.umd.cfar.lamp.viper.gui.config.AttrIsDynamicEditor" ;
	lal:setProperty [ 
		lal:propertyValue lal:Parent ;
		lal:propertyName "attrConfig" ] .
:attrIsDynamicRenderer
	a props:Renderer ;
	a lal:TemporaryBean ;
	lal:className "edu.umd.cfar.lamp.viper.gui.config.AttrIsDynamicRenderer" ;
	lal:setProperty [ 
		lal:propertyValue lal:Parent ;
		lal:propertyName "attrConfig" ] .

:attrValueEditor
	a props:Editor ;
	a lal:TemporaryBean ;
	lal:className "edu.umd.cfar.lamp.viper.gui.config.AttrValueEditor" ;
	lal:setProperty [
		lal:propertyName "dataFactory" ;
		lal:propertyValue :datatypes ] ;
	lal:setProperty [ 
		lal:propertyValue lal:Parent ;
		lal:propertyName "attrValue" ] .
:attrValueRenderer
	a props:Renderer ;
	a lal:TemporaryBean ;
	lal:className "edu.umd.cfar.lamp.viper.gui.config.AttrValueRenderer" ;
	lal:setProperty [ 
		lal:propertyValue lal:Parent ;
		lal:propertyName "attrValue" ] .

#####################
# Undo l10n && i18n #
#####################

[	a undo:Describer ; # an undo describer localizes an undo message
	undo:forEdit viper-impl:AddConfig ;
	rdfs:label "Add New Descriptor Type" ] .
[	a undo:Describer ; 
	undo:forEdit viper-impl:SetConfig ;
	rdfs:label "Change a Descriptor Type" ] .
[	a undo:Describer ; 
	undo:forEdit viper-impl:RemoveConfig ;
	rdfs:label "Remove a Descriptor Type" ] .

[	a undo:Describer ;
	undo:forEdit viper-impl:AddAttrConfig ;
	rdfs:label "Add New Attribute Field" ] .
[	a undo:Describer ;
	undo:forEdit viper-impl:RemoveAttrConfig ;
	rdfs:label "Remove Attribute Field" ] .
[	a undo:Describer ;
	undo:forEdit viper-impl:SetAttrConfig ;
	rdfs:label "Change an Attribute Field" ] .

[	a undo:Describer ;
	undo:forEdit viper-impl:AttrTypeChange ;
	rdfs:label "Change Attribute Data Type" ;
	undo:text [
		undo:value
			("Change attribute data type from "
			 [lal:propertyName "oldTypeLocal" ; lal:valueOf lal:Parent ] 
			 " to " [lal:propertyName "newTypeLocal" ; lal:valueOf lal:Parent ] ) ] ] .
[	a undo:Describer ; 
	rdfs:label "Change Attribute Default Value" ;
	undo:forEdit viper-impl:AttrDefaultValueChange ;
	undo:text [
		lal:lang "en"^^xsd:language ;
		undo:value
			("Change attribute default from "
			 [lal:propertyName "oldDefaultValue" ; lal:valueOf lal:Parent ] 
			 " to " [lal:propertyName "newDefaultValue" ; lal:valueOf lal:Parent ] ) ] ] .
[	a undo:Describer ; 
	rdfs:label "Change Attribute Name" ;
	undo:forEdit viper-impl:AttrNameChange ;
	undo:text [
		lal:lang "en"^^xsd:language ;
		undo:value
			("Change attribute name from "
			 [lal:propertyName "oldName" ; lal:valueOf lal:Parent ] 
			 " to " [lal:propertyName "newName" ; lal:valueOf lal:Parent ] ) ] ] .
[	a undo:Describer ; 
	rdfs:label "Toggle Attribute Dynamic/Static" ;
	undo:forEdit viper-impl:AttrIsDynamicChange ;
	undo:text [
		lal:lang "en"^^xsd:language ;
		undo:value
			("Set attribute dynamism to "
			 [lal:propertyName "newIsDynamic" ; lal:valueOf lal:Parent ] ) ] ] .


[	a undo:Describer ; 
	rdfs:label "Change Descriptor Name" ;
	undo:forEdit viper-impl:DescNameChange ;
	undo:text [
		lal:lang "en"^^xsd:language ;
		undo:value
			("Change Descriptor Name from "
			 [lal:propertyName "oldName" ; lal:valueOf lal:Parent ] 
			 " to " [lal:propertyName "newName" ; lal:valueOf lal:Parent ] ) ] ] .
[	a undo:Describer ; 
	rdfs:label "Change Descriptor Type" ;
	undo:forEdit viper-impl:DescTypeChange ;
	undo:text [
		lal:lang "en"^^xsd:language ;
		undo:value
			("Change descriptor type from "
			 [lal:propertyName "oldType" ; lal:valueOf lal:Parent ] 
			 " to " [lal:propertyName "newType" ; lal:valueOf lal:Parent ] ) ] ] .



# Remaining Questions:
#  Tab order
#  Default sort of properties
#  other keystrokes
#  first focus - it might be good to have focus always 
#                start on another bean instead of the app window?