/**
* \file ObjectBlob.h
* \author Juan Carlos San Miguel Avedillo (jcs)
* \date 5-06-08
* \brief Class to describe a new type of blob description \n
*		 This file is the header of the ObjectBlob class.
* \version 1.1\n
*			Version history:\n
*				- 1.0 (1-06-08): Initial Implementation (jcs)
*				- 1.1 (5-06-08): Added support for people detection confidence(jcs)
*
*/

//class description
/**
* \class ObjectBlob
* \brief Class to describe a static object with information to describe if it is stolen or abandoned
*
*
*/

#ifndef OBJECTBLOB_H_INCLUDE
#define OBJECTBLOB_H_INCLUDE

// Additional includes
#include "BasicBlob.h"
#include <vector>

const int NUMBER_CHECKING_STAGES_DEF = 5;

// Necessary namespace
using namespace std;

// Possible states for an static object
typedef enum {
	NONE = -1,
	STATIC_OBJ_TYPE_UNKNOWN = 0,
	STATIC_OBJ_TYPE_STOLEN = 1,
	STATIC_OBJ_TYPE_ABANDONED = 2,
	STATIC_OBJ_TYPE_LIGHT_CHANGE = 3
} DECISION;

//struct to store the data generated by the detectors
typedef struct
{
	int nFrame;
	int numCalc;

	//score obtained with each detector
	double valEdge, S_CON, S_CONB, S_SHP, S_CH, S_GRD, S_GH, S_GL, fusion, Sf1, SF2, SF3, SF4, SF5;
	double S_CH_dO, S_CH_dN, S_CH_dON;
	double S_PCC;


	//Evidences of being 
	double E_GLA, E_GLS, E_GHA, E_GHS, E_GRDA, E_GRDS, E_CHA, E_CHS, E_CONA, E_CONS, E_CONBA, E_CONBS, E_SHPA, E_SHPS, E_FS, E_FA, E_F1A, E_F1S, E_F2A, E_F2S, E_F3A, E_F3S, E_F4A, E_F4S, E_F5A, E_F5S;
	double E_PCCA, E_PCCS;

	//decision taken by each detector
	DECISION D_CON;	//Contour decision (BiDir)
	DECISION D_CONB;	//Contour decision
	DECISION D_SHP;	//Shape decision
	DECISION D_CH;	//Color Hist decision
	DECISION D_ED;	//Edge decision
	DECISION D_GH;	//Grad H decision
	DECISION D_GL;	//Grad L decision
	DECISION D_GRD;		//Grad decision
	DECISION D_PCC; //Color Pixel Difference
	DECISION D_F;  //final decision
	DECISION D_F1;
	DECISION D_F2;
	DECISION D_F3;
	DECISION D_F4;
	DECISION D_F5;
	DECISION D_GT; 	//ground truth

}DETECTION_RESULTS;

// Class Definition
class ObjectBlob : public cvBlob {
private:
	// Life count of the blob
	int count;


	// Static Life count of the blob
	int staticCount;

	// Last frame of the static Life count of the blob
	int lastFrame;

	// Flag of use or not use blob
	bool act;

	// Likelihood of being people
	double peopleLikelihood;

	bool peopleLikelihoodComputed;

	//Number of times that the checking process (check if it is stolen or abandoned) has been perfomed
	int numberOfCheckingSteps;



public:

	int initialStaticFrame;

	//should be private attribute...
	DETECTION_RESULTS *results;

	CvPoint v, vPrev;

public:
	// Default constructor
	ObjectBlob();

	// Constructor with initial values
	ObjectBlob(int id, cvBlob *pBlob, int count = 1, int StaticCount = 1, int StartFrame = 0, int lastFrame = 0, double peopleLikelihood = 0.0, bool act = 1, int numberOfCheckingSteps = 0, DETECTION_RESULTS *results = NULL);

	//Init method

    void init(int id, cvBlob *pBlob, int count, int StaticCount, int StartFrame, int LastFrame, double peopleLikelihood, bool _act, int _numberOfCheckingSteps, DETECTION_RESULTS *_results);
    //before void ObjectBlob::init(int id, cvBlob *pBlob, int count, int StaticCount, int StartFrame, int LastFrame, double peopleLikelihood, bool _act, int _numberOfCheckingSteps, DETECTION_RESULTS *_results);

	// Default destructor
	virtual ~ObjectBlob();

	cv::Rect getRect();

	// Method to get the life count of blob
	int	 getCount();
	// Method to get the blob state
	bool getAct();
	// Method to set the life count of the blob
	void setCount(int count);
	// Method to set the Static Life count of the blob
	void setStaticCount(int value);
	// Method to set the Last frame of the static Life count of the blob
	void setLastFrame(int value);
	// Method to set the Likelihood of being people
	void setPeopleLikelihood(double value);
	// Method to set the LikelihoodComputed
	void setPeopleLikelihoodComputed(bool PeopleLikelihoodComputed);
	// Method to set the number of checking steps that has been performed previously
	void setNumOfCheckingSteps(int value);

	// Useful Methods
	// Method to increase the life count
	void incrCount();
	// Method to decrease the life count
	void decrCount();
	// Method to increase the static life count
	void incrStaticCount();
	// Method to decrease the static life count
	void decrStaticCount();
	// Method to deny the state of the blob
	void negAct();
	// Method to afirmate the state of the blob
	void affAct();
	// Method to get the Static Life count of the blob
	int getStaticCount();
	// Method to get the Last frame of the static Life count of the blob
	int getLastFrame();
	// Method to get the Likelihood of being people
	double getPeopleLikelihood();
	// Method to get the LikelihoodComputed
	bool getPeopleLikelihoodComputed();
	// Method to get the number of checking steps that has been performed previously
	int getNumOfCheckingSteps();

	// Method to increment number of checking steps that has been performed previously
	void IncrNumOfCheckingSteps();
	// Method to decrement number of checking steps that has been performed previously
	void DecrNumOfCheckingSteps();

	// Method to set the detection results 
	void setDetectionResults(DETECTION_RESULTS *pdetection);

	// Method to get the detection results 
	DETECTION_RESULTS *getDetectionResults();
};

#endif
